datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

enum GameStatus {
  WAITING
  ACTIVE
  FINISHED
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  TwoFactorConfirmation TwoFactorConfirmation?

  // Quiz-related fields
  preferences    UserPreferences?
  createdQuizzes Quiz[]           @relation("QuizCreator")
  gameResults    GameResult[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPreferences {
  id                    String  @id @default(cuid())
  theme                 String  @default("default")
  enableTimer           Boolean @default(true)
  enableNegativeMarking Boolean @default(true)
  preferredDifficulty   String  @default("MEDIUM")
  instantAnswers        Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id          String  @id @default(cuid())
  title       String
  description String
  difficulty  String  @default("MEDIUM")
  isPublic    Boolean @default(true)

  // Relations
  creatorId   String
  creator     User         @relation("QuizCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  questions   Question[]
  gameResults GameResult[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId])
  @@index([isPublic])
}

model Question {
  id              String @id @default(cuid())
  type            String
  subject         String
  text            String
  pointsCorrect   Int
  pointsIncorrect Int

  // MCQ specific fields
  options         Json
  correctOptionId String?

  // Numerical specific fields
  correctAnswer Int

  // Relations
  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([quizId])
  @@index([subject])
}

model GameResult {
  id         String @id @default(cuid())
  finalScore Int
  totalTime  Int?

  quizTitle String
  quizData  Json

  playerAnswers Json

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  playedAt  DateTime @default(now())
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([quizId])
  @@index([playedAt])
}

// Authentication and Authorization

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
